// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";

/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "app_substitutes",
    checkConstraints: {
      app_substitutes_xata_id_length_xata_id: {
        name: "app_substitutes_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      primary_app_id_link: {
        name: "primary_app_id_link",
        columns: ["primary_app_id"],
        referencedTable: "apps",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      substitute_app_id_link: {
        name: "substitute_app_id_link",
        columns: ["substitute_app_id"],
        referencedTable: "apps",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_app_substitutes_xata_id_key: {
        name: "_pgroll_new_app_substitutes_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      { name: "notes", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "primary_app_id", type: "link", link: { table: "apps" }, notNull: false, unique: false, defaultValue: null, comment: '{"xata.link":"apps"}' },
      { name: "substitute_app_id", type: "link", link: { table: "apps" }, notNull: false, unique: false, defaultValue: null, comment: '{"xata.link":"apps"}' },
      { name: "xata_createdat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)", comment: "" },
      { name: "xata_updatedat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_version", type: "int", notNull: true, unique: false, defaultValue: "0", comment: "" },
    ],
  },
  {
    name: "apps",
    checkConstraints: {
      apps_xata_id_length_xata_id: {
        name: "apps_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_apps_xata_id_key: { name: "_pgroll_new_apps_xata_id_key", columns: ["xata_id"] },
      apps__pgroll_new_app_name_key: { name: "apps__pgroll_new_app_name_key", columns: ["app_name"] },
    },
    columns: [
      { name: "app_category", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "app_cost", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "app_description", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "app_name", type: "text", notNull: false, unique: true, defaultValue: null, comment: "" },
      { name: "app_url", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "is_active", type: "bool", notNull: false, unique: false, defaultValue: "true", comment: "" },
      { name: "xata_createdat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)", comment: "" },
      { name: "xata_updatedat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_version", type: "int", notNull: true, unique: false, defaultValue: "0", comment: "" },
    ],
  },
  {
    name: "plan_apps",
    checkConstraints: {
      plan_apps_xata_id_length_xata_id: {
        name: "plan_apps_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      app_id_link: { name: "app_id_link", columns: ["app_id"], referencedTable: "apps", referencedColumns: ["xata_id"], onDelete: "SET NULL" },
      plan_id_link: { name: "plan_id_link", columns: ["plan_id"], referencedTable: "plans", referencedColumns: ["xata_id"], onDelete: "SET NULL" },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_plan_apps_xata_id_key: { name: "_pgroll_new_plan_apps_xata_id_key", columns: ["xata_id"] },
    },
    columns: [
      { name: "app_id", type: "link", link: { table: "apps" }, notNull: false, unique: false, defaultValue: null, comment: '{"xata.link":"apps"}' },
      { name: "is_locked", type: "bool", notNull: false, unique: false, defaultValue: "true", comment: "" },
      { name: "plan_id", type: "link", link: { table: "plans" }, notNull: false, unique: false, defaultValue: null, comment: '{"xata.link":"plans"}' },
      { name: "position", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "xata_createdat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)", comment: "" },
      { name: "xata_updatedat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_version", type: "int", notNull: true, unique: false, defaultValue: "0", comment: "" },
    ],
  },
  {
    name: "plans",
    checkConstraints: {
      plans_xata_id_length_xata_id: {
        name: "plans_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_plans_xata_id_key: { name: "_pgroll_new_plans_xata_id_key", columns: ["xata_id"] },
      plans__pgroll_new_plan_code_key: { name: "plans__pgroll_new_plan_code_key", columns: ["plan_code"] },
    },
    columns: [
      { name: "badge", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "boost_max", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "boost_min", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "cost_per_month", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "plan_code", type: "text", notNull: false, unique: true, defaultValue: null, comment: "" },
      { name: "plan_name ", type: "text", notNull: false, unique: false, defaultValue: null, comment: "" }, // note: current column includes a trailing space in schema
      { name: "time_max", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "time_min", type: "int", notNull: false, unique: false, defaultValue: null, comment: "" },
      { name: "xata_createdat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)", comment: "" },
      { name: "xata_updatedat", type: "datetime", notNull: true, unique: false, defaultValue: "now()", comment: "" },
      { name: "xata_version", type: "int", notNull: true, unique: false, defaultValue: "0", comment: "" },
    ],
  },
];

const DatabaseClient = buildClient();

// âœ… Centralize config here; the SDK will read apiKey/branch from env
const defaultOptions = {
  // IMPORTANT: no ":main" suffix here
  databaseURL:
    "https://Jey-Fam-s-workspace-qpe9en.us-east-1.xata.sh/db/stackscore_core",
  branch: process.env.XATA_BRANCH || "main",
  apiKey: process.env.XATA_API_KEY
};

/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
export class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance;
/** @type { () => XataClient } */
export const getXataClient = () => (instance ??= new XataClient());
